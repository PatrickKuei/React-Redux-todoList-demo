{"version":3,"sources":["components/TodoList.js","redux/todoList/todoActions.js","redux/todoList/todoType.js","redux/todoList/todoReducer.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","todoList","useSelector","state","useState","newTodo","setNewTodo","dispatch","useDispatch","editing","setEditing","tempTodo","setTempTodo","onSubmit","e","preventDefault","type","payload","editTodo","value","todo","onChange","target","addTodo","map","item","key","id","onClick","initailState","todoReducer","action","length","filter","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAkFeA,MA9Ef,WACE,IAAMC,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMF,YAD5B,EAGYG,mBAAS,IAHrB,mBAGXC,EAHW,KAGFC,EAHE,KAIZC,EAAWC,cAJC,EAMYJ,oBAAS,GANrB,mBAMXK,EANW,KAMFC,EANE,OAQcN,mBAAS,IARvB,mBAQXO,EARW,KAQDC,EARC,KAUlB,OACE,6BACE,yCACEH,EAuBA,kBAAC,WAAD,KACE,yCACA,0BACEI,SAAU,SAACC,GACTA,EAAEC,iBACFL,GAAYD,GACZF,EC9BU,SAACI,GACvB,MAAO,CACLK,KCdqB,YDerBC,QAASN,GD2BUO,CAASP,MAGpB,2BACEK,KAAK,OACLG,MAAOR,EAASS,KAChBC,SAAU,SAACP,GAAD,OACRF,EAAY,2BAAKD,GAAN,IAAgBS,KAAMN,EAAEQ,OAAOH,YAG9C,0CAtCJ,kBAAC,WAAD,KACE,wCACA,0BACEN,SAAU,SAACC,GACTA,EAAEC,iBACc,KAAZV,IACFE,ECtBO,SAACF,GACtB,MAAO,CACLW,KCJoB,WDKpBC,QAASZ,GDmBYkB,CAAQlB,IACjBC,EAAW,OAIf,2BACEU,KAAK,QACLG,MAAOd,EACPgB,SAAU,SAACP,GACTR,EAAWQ,EAAEQ,OAAOH,UAGxB,4CAwBN,4BACGlB,EAASuB,KAAI,SAACC,GAAD,OACZ,wBAAIC,IAAKD,EAAKL,KAAOK,EAAKE,IACvBF,EAAKL,KACN,4BAAQQ,QAAS,kBAAMrB,ECtD1B,CACLS,KCTuB,cDUvBC,QDoDmDQ,EAAKE,OAAhD,UAGA,4BACEC,QAAS,WACPlB,GAAW,GACXE,EAAYa,KAHhB,e,eGjENI,EAAe,CACnB5B,SAAU,IA+BG6B,EA5BK,WAAmC,IAAlC3B,EAAiC,uDAAzB0B,EAAcE,EAAW,uCACpD,OAAQA,EAAOf,MACb,IDRoB,WCSlB,IAAMX,EAAU,CACde,KAAMW,EAAOd,QACbU,GAAIxB,EAAMF,SAAS+B,OAASD,EAAOd,SAErC,OAAO,2BACFd,GADL,IAEEF,SAAS,GAAD,mBAAME,EAAMF,UAAZ,CAAsBI,MAElC,IDfuB,cCgBrB,OAAO,2BACFF,GADL,IAEEF,SAAUE,EAAMF,SAASgC,QAAO,SAACR,GAAD,OAAUA,EAAKE,KAAOI,EAAOd,aAEjE,IDlBqB,YCmBnB,OAAO,2BACFd,GADL,IAEEF,SAAUE,EAAMF,SAASuB,KAAI,SAACC,GAAD,OAC3BA,EAAKE,KAAOI,EAAOd,QAAQU,GAAKI,EAAOd,QAAUQ,OAGvD,QACE,OAAOtB,ICzBE+B,EAFDC,YAAYL,GCYXM,MAVf,WACE,OACE,kBAAC,IAAD,CAAUF,MAAOA,GACf,6BACE,kBAAC,EAAD,SCGYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4ed66177.chunk.js","sourcesContent":["import React, { useState, Fragment } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addTodo, deleteTodo, editTodo } from \"../redux\";\r\n\r\nfunction TodoList() {\r\n  const todoList = useSelector((state) => state.todoList);\r\n\r\n  const [newTodo, setNewTodo] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const [tempTodo, setTempTodo] = useState(\"\");\r\n\r\n  return (\r\n    <div>\r\n      <h1>TODO LIST</h1>\r\n      {!editing ? (\r\n        <Fragment>\r\n          <h2>ADD TODO</h2>\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              if (newTodo !== \"\") {\r\n                dispatch(addTodo(newTodo));\r\n                setNewTodo(\"\");\r\n              }\r\n            }}\r\n          >\r\n            <input\r\n              type=\"index\"\r\n              value={newTodo}\r\n              onChange={(e) => {\r\n                setNewTodo(e.target.value);\r\n              }}\r\n            ></input>\r\n            <button>SUBMIT</button>\r\n          </form>\r\n        </Fragment>\r\n      ) : (\r\n        <Fragment>\r\n          <h2>EDIT TODO</h2>\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              setEditing(!editing);\r\n              dispatch(editTodo(tempTodo));\r\n            }}\r\n          >\r\n            <input\r\n              type=\"text\"\r\n              value={tempTodo.todo}\r\n              onChange={(e) =>\r\n                setTempTodo({ ...tempTodo, todo: e.target.value })\r\n              }\r\n            ></input>\r\n            <button>EDIT</button>\r\n          </form>\r\n        </Fragment>\r\n      )}\r\n      <ol>\r\n        {todoList.map((item) => (\r\n          <li key={item.todo + item.id}>\r\n            {item.todo}\r\n            <button onClick={() => dispatch(deleteTodo(item.id))}>\r\n              delete\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                setEditing(true);\r\n                setTempTodo(item);\r\n              }}\r\n            >\r\n              edit\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import { ADD_TODO, DELETE_TODO, EDIT_TODO } from \"./todoType\";\r\n\r\nexport const addTodo = (newTodo) => {\r\n  return {\r\n    type: ADD_TODO,\r\n    payload: newTodo,\r\n  };\r\n};\r\n\r\nexport const deleteTodo = (id) => {\r\n  return {\r\n    type: DELETE_TODO,\r\n    payload: id,\r\n  };\r\n};\r\n\r\nexport const editTodo = (tempTodo) => {\r\n  return {\r\n    type: EDIT_TODO,\r\n    payload: tempTodo,\r\n  };\r\n};\r\n","export const ADD_TODO = \"ADD_TODO\";\r\n\r\nexport const DELETE_TODO = \"DELETE_TODO\";\r\n\r\nexport const EDIT_TODO = \"EDIT_TODO\";\r\n","import { ADD_TODO, DELETE_TODO, EDIT_TODO } from \"./todoType\";\r\n\r\nconst initailState = {\r\n  todoList: [],\r\n};\r\n\r\nconst todoReducer = (state = initailState, action) => {\r\n  switch (action.type) {\r\n    case ADD_TODO:\r\n      const newTodo = {\r\n        todo: action.payload,\r\n        id: state.todoList.length + action.payload,\r\n      };\r\n      return {\r\n        ...state,\r\n        todoList: [...state.todoList, newTodo],\r\n      };\r\n    case DELETE_TODO:\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.filter((item) => item.id !== action.payload),\r\n      };\r\n    case EDIT_TODO:\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.map((item) =>\r\n          item.id === action.payload.id ? action.payload : item\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todoReducer;\r\n","import { createStore } from \"redux\";\r\nimport todoReducer from \"./todoList/todoReducer\";\r\n\r\nconst store = createStore(todoReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport TodoList from \"./components/TodoList\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div>\n        <TodoList />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}